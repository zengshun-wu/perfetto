// Autogenerated by:
// ../../src/tools/ftrace_proto_gen/ftrace_proto_gen.cc
// Do not edit.

syntax = "proto2";
package perfetto.protos;

message DsuPwrCalFtraceEvent {
  optional int32 dst_cpu = 1;
  optional uint64 task_util = 2;
  optional uint64 total_util = 3;
  optional uint32 dsu_bw = 4;
  optional uint32 emi_bw = 5;
  optional int32 temp = 6;
  optional uint32 dsu_freq = 7;
  optional uint32 dsu_volt = 8;
  optional uint32 dsu_dyn_pwr = 9;
  optional uint32 dsu_lkg_pwr = 10;
  optional uint32 mcusys_dyn_pwr = 11;
  optional uint32 dsu_tal_pwr = 12;
}
message SchedAddToTaskDemandFtraceEvent {
  optional int32 pid = 1;
  optional string comm = 2;
  optional uint32 evt = 3;
  optional uint64 delta = 4;
  optional uint64 util_sum = 5;
  optional uint64 cie = 6;
  optional uint64 fie = 7;
}
message SchedAdpfGetValueFtraceEvent {
  optional uint32 cmd = 1;
  optional uint32 sid = 2;
  optional uint32 tgid = 3;
  optional uint32 uid = 4;
  optional int32 threadIds_size = 5;
  optional int64 targetDurationNanos = 6;
}
message SchedAwareEnergyRtFtraceEvent {
  optional int32 wl_type = 1;
  optional int32 target_cpu = 2;
  optional uint64 this_pwr_eff = 3;
  optional uint64 pwr_eff = 4;
  optional uint32 task_util = 5;
}
message SchedBigTaskRotationFtraceEvent {
  optional int32 src_cpu = 1;
  optional int32 dst_cpu = 2;
  optional int32 src_pid = 3;
  optional int32 dst_pid = 4;
  optional int32 fin = 5;
}
message SchedCalcPwrEffFtraceEvent {
  optional int32 cpu = 1;
  optional uint64 cpu_util = 2;
  optional int32 opp = 3;
  optional uint64 cap = 4;
  optional uint64 dyn_pwr_eff = 5;
  optional uint64 static_pwr_eff = 6;
  optional uint64 pwr_eff = 7;
}
message SchedCheckTempFtraceEvent {
  optional string unit_name = 1;
  optional int32 id = 2;
  optional int32 temp = 3;
}
message SchedComputeEnergyFtraceEvent {
  optional int32 dst_cpu = 1;
  optional int32 gear_id = 2;
  optional int64 cpu_mask = 3;
  optional uint64 energy = 4;
  optional uint64 max_util = 5;
  optional uint64 sum_util = 6;
}
message SchedComputeEnergyCpuDsuFtraceEvent {
  optional int32 dst_cpu = 1;
  optional uint64 cpu_pwr = 2;
  optional uint64 delta_share_pwr = 3;
  optional uint64 dsu_pwr = 4;
  optional uint64 sum_pwr = 5;
}
message SchedComputeEnergyDsuFtraceEvent {
  optional int32 dst_cpu = 1;
  optional uint64 task_util = 2;
  optional uint64 sum_util = 3;
  optional uint32 dsu_bw = 4;
  optional uint32 emi_bw = 5;
  optional int32 temp = 6;
  optional uint32 dsu_freq = 7;
  optional uint32 dsu_volt = 8;
}
message SchedCpuOverutilizedFtraceEvent {
  optional int32 cpu = 1;
  optional int64 cpu_mask = 2;
  optional uint64 sum_util = 3;
  optional uint64 sum_cap = 4;
  optional int32 overutilized = 5;
}
message SchedCpuUtilFtraceEvent {
  optional uint32 cpu = 1;
  optional uint32 nr_running = 2;
  optional int64 cpu_util = 3;
  optional int64 cpu_max_util = 4;
  optional uint32 capacity = 5;
  optional uint32 capacity_orig = 6;
  optional uint32 idle_exit_latency = 7;
  optional int32 online = 8;
  optional int32 paused = 9;
  optional uint32 nr_rtg_high_prio_tasks = 10;
  optional int32 high_irq_ctrl = 11;
  optional int32 high_irq_load = 12;
  optional int64 irqload = 13;
  optional uint32 min_highirq_load = 14;
  optional uint32 irq_ratio = 15;
}
message SchedDeactivateVipTaskFtraceEvent {
  optional int32 pid = 1;
  optional int32 cpu = 2;
  optional int32 prev_pid = 3;
  optional int32 next_pid = 4;
}
message SchedDsuFreqFtraceEvent {
  optional int32 gear_id = 1;
  optional int32 dsu_freq_new = 2;
  optional int32 dsu_volt_new = 3;
  optional uint64 cpu_freq = 4;
  optional uint64 freq = 5;
  optional uint64 dyn_pwr = 6;
  optional uint32 share_volt = 7;
  optional uint32 cpu_volt = 8;
}
message SchedEenvInitFtraceEvent {
  optional uint32 dsu_freq_base = 1;
  optional uint32 dsu_volt_base = 2;
  optional uint32 dsu_freq_thermal = 3;
  optional uint32 gear_idx = 4;
}
message SchedEffectiveMaskFtraceEvent {
  optional int32 pid = 1;
  optional int32 target_cpu = 2;
  optional uint32 prefer = 3;
  optional int64 effective_softmask = 4;
  optional int64 tsk_softmask = 5;
  optional int64 tg_softmask = 6;
  optional int32 cpuctl = 7;
}
message SchedEmCpuEnergyFtraceEvent {
  optional int32 wl_type = 1;
  optional int32 idx = 2;
  optional uint64 freq = 3;
  optional string cost_type = 4;
  optional uint64 cost = 5;
  optional uint64 scale_cpu = 6;
  optional uint64 dyn_pwr = 7;
  optional uint64 static_pwr = 8;
}
message SchedEnergyDeltaFtraceEvent {
  optional uint64 pwr_delta = 1;
}
message SchedEnergyInitFtraceEvent {
  optional int64 cpu_mask = 1;
  optional uint32 gear_idx = 2;
  optional uint64 cpu_cap = 3;
  optional uint64 pds_cap = 4;
}
message SchedEnqDeqTaskFtraceEvent {
  optional string comm = 1;
  optional int32 pid = 2;
  optional int32 prio = 3;
  optional int32 cpu = 4;
  optional int32 gp0_cnt = 5;
  optional int32 gp1_cnt = 6;
  optional int32 gp2_cnt = 7;
  optional int32 gp3_cnt = 8;
  optional uint32 enqueue = 9;
  optional uint32 nr_running = 10;
  optional uint32 rt_nr_running = 11;
  optional uint32 cpus_allowed = 12;
  optional uint64 flt_cpu_util = 13;
  optional uint64 cfs_util = 14;
  optional uint64 rt_util = 15;
}
message SchedFindBestCandidatesFtraceEvent {
  optional int32 pid = 1;
  optional uint32 is_vip = 2;
  optional int64 candidates = 3;
  optional int32 order_index = 4;
  optional int32 end_index = 5;
  optional int64 active_mask = 6;
  optional int64 pause_mask = 7;
  optional int64 allowed_cpu_mask = 8;
}
message SchedFindBusiestGroupFtraceEvent {
  optional int32 src_cpu = 1;
  optional int32 dst_cpu = 2;
  optional int32 out_balance = 3;
  optional int32 reason = 4;
}
message SchedFindCpuInIrqFtraceEvent {
  optional int32 pid = 1;
  optional int32 policy = 2;
  optional int32 target_cpu = 3;
  optional int32 prev_cpu = 4;
  optional uint32 fit_cpus = 5;
  optional uint32 idle_cpus = 6;
  optional int32 best_idle_cpu = 7;
  optional uint64 best_idle_pwr = 8;
  optional uint32 min_exit_lat = 9;
  optional int32 max_spare_cpu = 10;
  optional uint64 best_pwr = 11;
  optional int64 max_spare_cap = 12;
}
message SchedFindEnergyEfficientCpuFtraceEvent {
  optional uint32 in_irq = 1;
  optional uint64 best_delta = 2;
  optional int32 best_energy_cpu = 3;
  optional int32 best_idle_cpu = 4;
  optional int32 idle_max_spare_cap_cpu = 5;
  optional int32 sys_max_spare_cap_cpu = 6;
}
message SchedFindImbalancedVvipGearFtraceEvent {
  optional int32 cpu = 1;
  optional int32 num_vvip_in_gear = 2;
}
message SchedFindLowestRqFtraceEvent {
  optional int32 pid = 1;
  optional int32 policy = 2;
  optional int32 target_cpu = 3;
  optional uint32 avail_lowest_mask = 4;
  optional uint32 lowest_mask = 5;
  optional uint32 active_mask = 6;
}
message SchedFitsCapCeilingFtraceEvent {
  optional uint32 fit = 1;
  optional int32 cpu = 2;
  optional uint64 cpu_util = 3;
  optional uint64 cup_cap = 4;
  optional uint64 ceiling = 5;
  optional uint32 capacity_dn_margin = 6;
  optional uint32 capacity_up_margin = 7;
  optional uint32 sugov_margin = 8;
  optional uint64 capacity_orig = 9;
  optional uint32 AM_enabled = 10;
}
message SchedFltGetCpuFtraceEvent {
  optional int32 cpu = 1;
  optional int32 util = 2;
}
message SchedFltGetCpuGroupFtraceEvent {
  optional int32 cpu = 1;
  optional int32 grp_id = 2;
  optional int32 util = 3;
}
message SchedFltGetOUtilFtraceEvent {
  optional int32 cpu = 1;
  optional int32 cpu_r = 2;
  optional int32 grp_idx = 3;
  optional uint32 util_ratio = 4;
  optional int32 flt_util = 5;
  optional uint32 grp_r = 6;
  optional uint32 total = 7;
}
message SchedFltSetCpuFtraceEvent {
  optional int32 cpu = 1;
  optional int32 util = 2;
}
message SchedForceMigrateFtraceEvent {
  optional string comm = 1;
  optional int32 pid = 2;
  optional int32 dest = 3;
  optional int32 force = 4;
}
message SchedFrequencyLimitsFtraceEvent {
  optional int32 cpu_id = 1;
  optional int32 freq_thermal = 2;
}
message SchedGatherPeltGroupUtilFtraceEvent {
  optional string comm = 1;
  optional int32 pid = 2;
  optional uint64 tsk_util = 3;
  optional int32 grp_id = 4;
  optional int32 cpu = 5;
}
message SchedGetCpuGroupUtilFtraceEvent {
  optional int32 cpu = 1;
  optional int32 group_id = 2;
  optional int32 util = 3;
}
message SchedGetGearIndicesFtraceEvent {
  optional int32 pid = 1;
  optional int32 uclamp_task_util = 2;
  optional int32 gear_hints_enable = 3;
  optional int32 gear_start = 4;
  optional int32 num_gear = 5;
  optional int32 gear_reverse = 6;
  optional int32 num_sched_clusters = 7;
  optional int32 max_gear_num = 8;
  optional int32 order_index = 9;
  optional int32 end_index = 10;
  optional int32 reverse = 11;
}
message SchedGetGroupRunningTaskCntFtraceEvent {
  optional int32 group_id = 1;
  optional int32 win_idx = 2;
  optional int32 cnt = 3;
}
message SchedGetGroupUtilFtraceEvent {
  optional int32 type = 1;
  optional int32 group_id = 2;
  optional int32 window_count = 3;
  optional int32 weight_policy = 4;
  optional int32 res = 5;
  optional int32 hint = 6;
}
message SchedGetPeltGroupUtilFtraceEvent {
  optional int32 cpu = 1;
  optional uint64 delta = 2;
  optional uint64 gp0_util = 3;
  optional uint64 gp1_util = 4;
  optional uint64 gp2_util = 5;
  optional uint64 gp3_util = 6;
}
message SchedGetVipTaskPrioFtraceEvent {
  optional int32 pid = 1;
  optional int32 vip_prio = 2;
  optional int32 prio = 3;
  optional uint32 is_ls = 4;
  optional uint32 ls_vip_threshold = 5;
  optional int32 cpuctl = 6;
  optional uint32 group_threshold = 7;
  optional uint32 is_basic_vip = 8;
}
message SchedHeadroomIntervalTickFtraceEvent {
  optional uint32 tick = 1;
}
message SchedInsertVipTaskFtraceEvent {
  optional int32 pid = 1;
  optional int32 cpu = 2;
  optional int32 vip_prio = 3;
  optional uint32 at_front = 4;
  optional int32 prev_pid = 5;
  optional int32 next_pid = 6;
  optional uint32 requeue = 7;
  optional uint32 is_first_entry = 8;
  optional int32 prio = 9;
  optional int32 cpuctl = 10;
}
message SchedLeakageFtraceEvent {
  optional int32 cpu = 1;
  optional int32 opp = 2;
  optional uint32 temp = 3;
  optional uint64 cpu_static_pwr = 4;
  optional uint64 static_pwr = 5;
  optional uint64 sum_cap = 6;
}
message SchedMaxUtilFtraceEvent {
  optional int32 gear_idx = 1;
  optional int32 dst_cpu = 2;
  optional uint64 max_util = 3;
  optional int32 cpu = 4;
  optional uint64 util = 5;
  optional uint64 cpu_util = 6;
}
message SchedNewlyIdleBalanceIntervalFtraceEvent {
  optional uint32 interval_us = 1;
}
message SchedNextNewBalanceFtraceEvent {
  optional uint64 now_ns = 1;
  optional uint64 next_balance = 2;
}
message SchedNextUpdateThermalHeadroomFtraceEvent {
  optional uint64 now = 1;
  optional uint64 next_update_thermal = 2;
}
message SchedPauseCpusFtraceEvent {
  optional uint32 req_cpus = 1;
  optional uint32 last_cpus = 2;
  optional uint32 time = 3;
  optional uint32 pause = 4;
  optional int32 err = 5;
  optional uint32 pause_cpus = 6;
  optional uint32 online_cpus = 7;
  optional uint32 active_cpus = 8;
}
message SchedPostInitEntityUtilAvgFtraceEvent {
  optional int32 pid = 1;
  optional string comm = 2;
  optional uint64 ori = 3;
  optional uint64 util_avg = 4;
  optional uint64 weight = 5;
  optional uint32 freq = 6;
  optional uint64 desired_cpufreq = 7;
  optional int32 cpu = 8;
}
message SchedQosCpuUtilFtraceEvent {
  optional uint32 cpu = 1;
  optional uint32 qos = 2;
  optional uint32 util = 3;
  optional uint32 qos_util = 4;
}
message SchedQueueTaskFtraceEvent {
  optional int32 cpu = 1;
  optional int32 pid = 2;
  optional int32 enqueue = 3;
  optional uint64 cfs_util = 4;
  optional uint32 min = 5;
  optional uint32 max = 6;
  optional uint32 task_min = 7;
  optional uint32 task_max = 8;
  optional uint32 tsk_mask = 9;
}
message SchedRolloverTaskWindowFtraceEvent {
  optional int32 pid = 1;
  optional string comm = 2;
  optional uint32 full_window = 3;
  optional uint32 prev_window = 4;
  optional uint32 curr_window = 5;
}
message SchedSelectTaskRqFtraceEvent {
  optional int32 pid = 1;
  optional int32 compat_thread = 2;
  optional uint32 in_irq = 3;
  optional int32 policy = 4;
  optional int32 backup_reason = 5;
  optional int32 prev_cpu = 6;
  optional int32 target_cpu = 7;
  optional int32 task_util = 8;
  optional int32 task_util_est = 9;
  optional int32 boost = 10;
  optional int64 task_mask = 11;
  optional int64 effective_softmask = 12;
  optional uint32 prefer = 13;
  optional int32 sync_flag = 14;
  optional int32 cpuctl_grp_id = 15;
  optional int32 cpuset_grp_id = 16;
}
message SchedSelectTaskRqRtFtraceEvent {
  optional int32 pid = 1;
  optional int32 policy = 2;
  optional int32 target_cpu = 3;
  optional int64 lowest_mask = 4;
  optional int32 rt_aggre_preempt_enable = 5;
  optional uint32 idle_cpus = 6;
  optional uint32 cfs_cpus = 7;
  optional uint32 rt_cpus = 8;
  optional int32 cfs_lowest_cpu = 9;
  optional int32 cfs_lowest_prio = 10;
  optional int32 cfs_lowest_pid = 11;
  optional int32 rt_lowest_cpu = 12;
  optional int32 rt_lowest_prio = 13;
  optional int32 rt_lowest_pid = 14;
  optional uint64 task_util_est = 15;
  optional uint64 uclamp_min = 16;
  optional uint64 uclamp_max = 17;
  optional uint64 uclamp_task_util = 18;
  optional int32 sd_flag = 19;
  optional uint32 sync = 20;
  optional int64 task_mask = 21;
  optional int32 cpuctl_grp_id = 22;
  optional int32 cpuset_grp_id = 23;
  optional int64 act_mask = 24;
}
message SchedSetCpusAllowedFtraceEvent {
  optional int32 pid = 1;
  optional uint32 dest_cpu = 2;
  optional uint32 kthread = 3;
  optional uint32 new_mask = 4;
  optional uint32 valid_mask = 5;
  optional uint32 pause_cpus = 6;
}
message SchedSetPreferredClusterFtraceEvent {
  optional int32 wl_type = 1;
  optional int32 grp_id = 2;
  optional int32 util = 3;
  optional int32 threshold = 4;
  optional uint32 gear_hint = 5;
}
message SchedSetUclampFtraceEvent {
  optional int32 pid = 1;
  optional int32 task_cpu = 2;
  optional int32 task_on_rq_queued = 3;
  optional uint32 clamp_id = 4;
  optional int32 value = 5;
}
message SchedTargetMaxSpareCpuFtraceEvent {
  optional string type = 1;
  optional int32 best_cpu = 2;
  optional int32 new_cpu = 3;
  optional int32 replace = 4;
  optional int32 is_vip = 5;
  optional int32 num_vip = 6;
  optional int32 min_num_vip = 7;
  optional int64 spare_cap = 8;
  optional int64 target_max_spare_cap = 9;
}
message SchedTaskToGrpFtraceEvent {
  optional string comm = 1;
  optional int32 pid = 2;
  optional int32 grp_id = 3;
  optional int32 ret = 4;
  optional int32 type = 5;
}
message SchedTaskUclampFtraceEvent {
  optional int32 pid = 1;
  optional uint64 util = 2;
  optional uint32 active = 3;
  optional uint32 min = 4;
  optional uint32 max = 5;
  optional uint32 min_ud = 6;
  optional uint32 min_req = 7;
  optional uint32 max_ud = 8;
  optional uint32 max_req = 9;
}
message SchedTaskUtilFtraceEvent {
  optional int32 pid = 1;
  optional uint64 util = 2;
  optional uint32 util_enqueued = 3;
  optional uint32 util_ewma = 4;
}
message SchedUpdateCpuBusyTimeFtraceEvent {
  optional int32 cpu = 1;
  optional int32 pid = 2;
  optional string comm = 3;
  optional uint32 evt = 4;
  optional uint64 prev_delta = 5;
  optional uint64 curr_delta = 6;
}
message SchedUpdateCpuHistoryFtraceEvent {
  optional int32 cpu = 1;
  optional uint32 samples = 2;
  optional uint64 runtime = 3;
  optional uint32 sum_hist0 = 4;
  optional uint32 sum_hist1 = 5;
  optional uint32 sum_hist2 = 6;
  optional uint32 sum_hist3 = 7;
  optional uint32 sum_hist4 = 8;
  optional uint32 util_hist0 = 9;
  optional uint32 util_hist1 = 10;
  optional uint32 util_hist2 = 11;
  optional uint32 util_hist3 = 12;
  optional uint32 util_hist4 = 13;
  optional uint32 group_sum_hist0 = 14;
  optional uint32 group_sum_hist1 = 15;
  optional uint32 group_sum_hist2 = 16;
  optional uint32 group_sum_hist3 = 17;
  optional uint32 group_sum_hist4 = 18;
  optional uint32 group_sum_hist5 = 19;
  optional uint32 group_sum_hist6 = 20;
  optional uint32 group_sum_hist7 = 21;
  optional uint32 group_sum_hist8 = 22;
  optional uint32 group_sum_hist9 = 23;
  optional uint32 group_sum_hist10 = 24;
  optional uint32 group_sum_hist11 = 25;
  optional uint32 group_sum_hist12 = 26;
  optional uint32 group_sum_hist13 = 27;
  optional uint32 group_sum_hist14 = 28;
  optional uint32 group_sum_hist15 = 29;
  optional uint32 group_sum_hist16 = 30;
  optional uint32 group_sum_hist17 = 31;
  optional uint32 group_sum_hist18 = 32;
  optional uint32 group_sum_hist19 = 33;
  optional uint32 grp_util_his0 = 34;
  optional uint32 grp_util_his1 = 35;
  optional uint32 grp_util_his2 = 36;
  optional uint32 grp_util_his3 = 37;
  optional uint32 grp_util_his4 = 38;
  optional uint32 grp_util_his5 = 39;
  optional uint32 grp_util_his6 = 40;
  optional uint32 grp_util_his7 = 41;
  optional uint32 grp_util_his8 = 42;
  optional uint32 grp_util_his9 = 43;
  optional uint32 grp_util_his10 = 44;
  optional uint32 grp_util_his11 = 45;
  optional uint32 grp_util_his12 = 46;
  optional uint32 grp_util_his13 = 47;
  optional uint32 grp_util_his14 = 48;
  optional uint32 grp_util_his15 = 49;
  optional uint32 grp_util_his16 = 50;
  optional uint32 grp_util_his17 = 51;
  optional uint32 grp_util_his18 = 52;
  optional uint32 grp_util_his19 = 53;
  optional uint32 grp_util_act_his0 = 54;
  optional uint32 grp_util_act_his1 = 55;
  optional uint32 grp_util_act_his2 = 56;
  optional uint32 grp_util_act_his3 = 57;
  optional uint32 grp_util_act_his4 = 58;
  optional uint32 grp_util_act_his5 = 59;
  optional uint32 grp_util_act_his6 = 60;
  optional uint32 grp_util_act_his7 = 61;
  optional uint32 grp_util_act_his8 = 62;
  optional uint32 grp_util_act_his9 = 63;
  optional uint32 grp_util_act_his10 = 64;
  optional uint32 grp_util_act_his11 = 65;
  optional uint32 grp_util_act_his12 = 66;
  optional uint32 grp_util_act_his13 = 67;
  optional uint32 grp_util_act_his14 = 68;
  optional uint32 grp_util_act_his15 = 69;
  optional uint32 grp_util_act_his16 = 70;
  optional uint32 grp_util_act_his17 = 71;
  optional uint32 grp_util_act_his18 = 72;
  optional uint32 grp_util_act_his19 = 73;
}
message SchedUpdateHistoryFtraceEvent {
  optional string comm = 1;
  optional int32 pid = 2;
  optional uint64 util_avg = 3;
  optional uint32 ewma = 4;
  optional uint32 enqueued = 5;
  optional uint32 demand = 6;
  optional uint32 util_demand = 7;
  optional uint32 runtime = 8;
  optional int32 samples = 9;
  optional uint32 evt = 10;
  optional uint32 hisevt = 11;
  optional uint32 hist0 = 12;
  optional uint32 hist1 = 13;
  optional uint32 hist2 = 14;
  optional uint32 hist3 = 15;
  optional uint32 hist4 = 16;
  optional uint32 util_sum_hist0 = 17;
  optional uint32 util_sum_hist1 = 18;
  optional uint32 util_sum_hist2 = 19;
  optional uint32 util_sum_hist3 = 20;
  optional uint32 util_sum_hist4 = 21;
  optional uint32 util_avg_history0 = 22;
  optional uint32 util_avg_history1 = 23;
  optional uint32 util_avg_history2 = 24;
  optional uint32 util_avg_history3 = 25;
  optional uint32 util_avg_history4 = 26;
}
message SchedUpdateTaskRavgFtraceEvent {
  optional int32 pid = 1;
  optional string comm = 2;
  optional uint32 evt = 3;
  optional uint64 irqtime = 4;
  optional int32 group_id = 5;
  optional uint64 wallclock = 6;
  optional uint64 mark_start = 7;
  optional uint64 window_start = 8;
  optional int32 cpu = 9;
  optional uint64 prev_runnable_sum = 10;
  optional uint64 curr_runnable_sum = 11;
}
message SchedUtilFitsCpuFtraceEvent {
  optional int32 cpu = 1;
  optional uint64 pre_clamped_util = 2;
  optional uint64 clamped_util = 3;
  optional uint64 cpu_cap = 4;
  optional uint64 task_min_cap = 5;
  optional uint64 task_max_cap = 6;
  optional uint64 rq_min_cap = 7;
  optional uint64 rq_max_cap = 8;
}
message SelectPackingCpuFtraceEvent {
  optional uint32 cpu = 1;
  optional uint64 util = 2;
  optional uint64 util_with_p = 3;
  optional uint64 cpu_cap = 4;
  optional uint64 spare_cap = 5;
  optional uint32 packing_core = 6;
  optional uint64 packing_margin = 7;
  optional int32 temp_qos = 8;
  optional uint32 cur_freq = 9;
  optional uint64 max_cpu_util = 10;
  optional int32 min_freq = 11;
  optional int32 choose_type = 12;
}
message SugovExtAdaptiveMarginFtraceEvent {
  optional uint32 gear_id = 1;
  optional uint32 margin = 2;
  optional uint32 ratio = 3;
}
message SugovExtCurrUclampFtraceEvent {
  optional int32 cpu = 1;
  optional uint32 pid = 2;
  optional uint32 util_ori = 3;
  optional uint32 util = 4;
  optional uint32 u_min = 5;
  optional uint32 u_max = 6;
}
message SugovExtDsuFreqVoteFtraceEvent {
  optional uint32 wl_type = 1;
  optional uint32 gear_id = 2;
  optional uint32 cpu_freq = 3;
  optional uint32 dsu_freq_vote = 4;
}
message SugovExtGearStateFtraceEvent {
  optional uint32 gear_id = 1;
  optional uint64 target_freq = 2;
  optional uint64 util_type = 3;
  optional uint64 freq = 4;
  optional uint64 min = 5;
  optional uint64 max = 6;
  optional uint32 dvfs_tracking_enable = 7;
}
message SugovExtGearUclampFtraceEvent {
  optional int32 cpu = 1;
  optional uint32 util_ori = 2;
  optional uint32 umin = 3;
  optional uint32 umax = 4;
  optional uint32 util = 5;
  optional uint32 umax_gear = 6;
}
message SugovExtGroupDvfsFtraceEvent {
  optional int32 gearid = 1;
  optional uint64 util = 2;
  optional uint64 pelt_util_with_margin = 3;
  optional uint64 flt_util = 4;
  optional uint64 pelt_util = 5;
  optional uint64 pelt_margin = 6;
  optional uint64 freq = 7;
  optional uint64 min_freq = 8;
}
message SugovExtPcpuPgrpURtoMargFtraceEvent {
  optional int32 cpu = 1;
  optional int32 gu0 = 2;
  optional int32 gu1 = 3;
  optional int32 gu2 = 4;
  optional int32 gu3 = 5;
  optional int32 rto0 = 6;
  optional int32 rto1 = 7;
  optional int32 rto2 = 8;
  optional int32 rto3 = 9;
  optional int32 marg0 = 10;
  optional int32 marg1 = 11;
  optional int32 marg2 = 12;
  optional int32 marg3 = 13;
  optional int32 ot = 14;
  optional int32 pcpu_pgrp_wetin0 = 15;
  optional int32 pcpu_pgrp_wetin1 = 16;
  optional int32 pcpu_pgrp_wetin2 = 17;
  optional int32 pcpu_pgrp_wetin3 = 18;
  optional int32 pcpu_pgrp_tar_u0 = 19;
  optional int32 pcpu_pgrp_tar_u1 = 20;
  optional int32 pcpu_pgrp_tar_u2 = 21;
  optional int32 pcpu_pgrp_tar_u3 = 22;
  optional int32 cpu_tar_util = 23;
  optional int32 grp_margin0 = 24;
  optional int32 grp_margin1 = 25;
  optional int32 grp_margin2 = 26;
  optional int32 grp_margin3 = 27;
}
message SugovExtPgerPgrpUFtraceEvent {
  optional int32 gear_id = 1;
  optional int32 cpu = 2;
  optional int32 gu0 = 3;
  optional int32 gu1 = 4;
  optional int32 gu2 = 5;
  optional int32 gu3 = 6;
  optional int32 converge_thr0 = 7;
  optional int32 converge_thr1 = 8;
  optional int32 converge_thr2 = 9;
  optional int32 converge_thr3 = 10;
  optional int32 margin_for_min_opp0 = 11;
  optional int32 margin_for_min_opp1 = 12;
  optional int32 margin_for_min_opp2 = 13;
  optional int32 margin_for_min_opp3 = 14;
}
message SugovExtPgrpHintFtraceEvent {
  optional int32 ht0 = 1;
  optional int32 ht1 = 2;
  optional int32 ht2 = 3;
  optional int32 ht3 = 4;
}
message SugovExtSbbFtraceEvent {
  optional int32 cpu = 1;
  optional int32 pid = 2;
  optional uint32 boost = 3;
  optional uint32 util = 4;
  optional uint32 util_boost = 5;
  optional uint32 active_ratio = 6;
  optional uint32 threshold = 7;
}
message SugovExtTaCtrlFtraceEvent {
  optional int32 val = 1;
  optional int32 force_ctrl = 2;
  optional int32 refcnt = 3;
  optional int32 top_grp_aware = 4;
}
message SugovExtTaCtrlCallerFtraceEvent {
  optional string caller0 = 1;
}
message SugovExtTarFtraceEvent {
  optional int32 cpu = 1;
  optional uint64 ret_util = 2;
  optional uint64 cpu_util = 3;
  optional uint64 umax = 4;
  optional int32 am = 5;
}
message SugovExtTarCalFtraceEvent {
  optional int32 cpu = 1;
  optional int32 pcpu_tar_u = 2;
  optional int32 gt0 = 3;
  optional int32 gt1 = 4;
  optional int32 gt2 = 5;
  optional int32 gt3 = 6;
  optional int32 nr0 = 7;
  optional int32 nr1 = 8;
  optional int32 nr2 = 9;
  optional int32 nr3 = 10;
  optional int32 ot = 11;
}
message SugovExtTurnPointMarginFtraceEvent {
  optional uint32 gear_id = 1;
  optional uint32 orig_util = 2;
  optional uint32 margin_util = 3;
  optional uint32 turn_point = 4;
  optional uint32 target_margin = 5;
}
message SugovExtUtilFtraceEvent {
  optional int32 cpu = 1;
  optional uint64 util = 2;
  optional uint32 min = 3;
  optional uint32 max = 4;
}
message SugovExtWlTypeFtraceEvent {
  optional uint32 gear_id = 1;
  optional uint32 cpu = 2;
  optional uint32 wl_type = 3;
}
